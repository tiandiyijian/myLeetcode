from collections import deque
from functools import lru_cache
from typing import Deque, List


class Solution:

    def hasValidPath(self, grid: List[List[str]]) -> bool:
        m, n = len(grid), len(grid[0])
        ans = False

        # 他妈的, 把@lru_cache(None)加上就过了, 艹
        # 默认的maxsize是128, 所以一定要加None
        @lru_cache(None)
        def dfs(x, y, status):
            if status < -(m+n)//2:
                return
            nonlocal ans
            if ans:
                return

            if grid[x][y] == ')':
                if status >= 0:
                    return
                else:
                    status += 1
            else:
                status -= 1

            # print(x, y, status)
            if x == m - 1 and y == n - 1 and status == 0:
                ans = True
                return

            if x + 1 < m:
                dfs(x + 1, y, status)
            if y + 1 < n:
                dfs(x, y + 1, status)

        dfs(0, 0, 0)
        return ans

grid = [["(","(","("],[")","(",")"],["(","(",")"],["(","(",")"]]
grid
print(Solution().hasValidPath(grid))